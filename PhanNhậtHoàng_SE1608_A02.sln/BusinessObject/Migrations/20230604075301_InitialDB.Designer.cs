// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BusinessObject.Migrations
{
    [DbContext(typeof(DataEmployeeDBcontext))]
    [Migration("20230604075301_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusinessObject.CompanyProject", b =>
                {
                    b.Property<int?>("CompanyProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EstimatedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyProjectID");

                    b.ToTable("CompanyProjects");

                    b.HasData(
                        new
                        {
                            CompanyProjectID = 1,
                            EstimatedStartDate = new DateTime(2023, 6, 4, 14, 53, 1, 287, DateTimeKind.Local).AddTicks(3942),
                            ExpectedEndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(5779),
                            ProjectDescription = "Project 1 Description",
                            ProjectName = "Project 1"
                        },
                        new
                        {
                            CompanyProjectID = 2,
                            EstimatedStartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6118),
                            ExpectedEndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6122),
                            ProjectDescription = "Project 2 Description",
                            ProjectName = "Project 2"
                        },
                        new
                        {
                            CompanyProjectID = 3,
                            EstimatedStartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6127),
                            ExpectedEndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6128),
                            ProjectDescription = "Project 3 Description",
                            ProjectName = "Project 3"
                        },
                        new
                        {
                            CompanyProjectID = 4,
                            EstimatedStartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6129),
                            ExpectedEndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6130),
                            ProjectDescription = "Project 4 Description",
                            ProjectName = "Project 4"
                        },
                        new
                        {
                            CompanyProjectID = 5,
                            EstimatedStartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6131),
                            ExpectedEndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6132),
                            ProjectDescription = "Project 5 Description",
                            ProjectName = "Project 5"
                        });
                });

            modelBuilder.Entity("BusinessObject.Departmennt", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            DepartmentDescription = "Department 1 Description",
                            DepartmentName = "Department 1"
                        },
                        new
                        {
                            DepartmentID = 2,
                            DepartmentDescription = "Department 2 Description",
                            DepartmentName = "Department 2"
                        },
                        new
                        {
                            DepartmentID = 3,
                            DepartmentDescription = "Department 3 Description",
                            DepartmentName = "Department 3"
                        },
                        new
                        {
                            DepartmentID = 4,
                            DepartmentDescription = "Department 4 Description",
                            DepartmentName = "Department 4"
                        },
                        new
                        {
                            DepartmentID = 5,
                            DepartmentDescription = "Department 5 Description",
                            DepartmentName = "Department 5"
                        });
                });

            modelBuilder.Entity("BusinessObject.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeID = 1,
                            Address = "Address 1",
                            DepartmentID = 1,
                            EmailAddress = "employee1@example.com",
                            FullName = "Employee 1",
                            Password = "2",
                            Skills = "Skill 1",
                            Status = "Active",
                            Telephone = "123456789"
                        },
                        new
                        {
                            EmployeeID = 2,
                            Address = "Address 2",
                            DepartmentID = 2,
                            EmailAddress = "employee2@example.com",
                            FullName = "Employee 2",
                            Password = "1",
                            Skills = "Skill 2",
                            Status = "Active",
                            Telephone = "987654321"
                        },
                        new
                        {
                            EmployeeID = 3,
                            Address = "Address 3",
                            DepartmentID = 3,
                            EmailAddress = "employee3@example.com",
                            FullName = "Employee 3",
                            Password = "1",
                            Skills = "Skill 3",
                            Status = "Active",
                            Telephone = "555555555"
                        },
                        new
                        {
                            EmployeeID = 4,
                            Address = "Address 4",
                            DepartmentID = 4,
                            EmailAddress = "employee4@example.com",
                            FullName = "Employee 4",
                            Password = "1",
                            Skills = "Skill 4",
                            Status = "Active",
                            Telephone = "111111111"
                        },
                        new
                        {
                            EmployeeID = 5,
                            Address = "Address 5",
                            DepartmentID = 5,
                            EmailAddress = "employee5@example.com",
                            FullName = "Employee 5",
                            Password = "1",
                            Skills = "Skill 5",
                            Status = "Active",
                            Telephone = "999999999"
                        });
                });

            modelBuilder.Entity("BusinessObject.ParticipatingProject", b =>
                {
                    b.Property<int?>("CompanyProjectID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectRole")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyProjectID", "EmployeeID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("ParticipatingProjects");

                    b.HasData(
                        new
                        {
                            CompanyProjectID = 1,
                            EmployeeID = 1,
                            EndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7157),
                            ProjectRole = 1,
                            StartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(6989)
                        },
                        new
                        {
                            CompanyProjectID = 1,
                            EmployeeID = 2,
                            EndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7490),
                            ProjectRole = 2,
                            StartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7487)
                        },
                        new
                        {
                            CompanyProjectID = 2,
                            EmployeeID = 3,
                            EndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7492),
                            ProjectRole = 1,
                            StartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7492)
                        },
                        new
                        {
                            CompanyProjectID = 2,
                            EmployeeID = 4,
                            EndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7495),
                            ProjectRole = 2,
                            StartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7494)
                        },
                        new
                        {
                            CompanyProjectID = 3,
                            EmployeeID = 5,
                            EndDate = new DateTime(2023, 7, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7497),
                            ProjectRole = 1,
                            StartDate = new DateTime(2023, 6, 4, 14, 53, 1, 288, DateTimeKind.Local).AddTicks(7496)
                        });
                });

            modelBuilder.Entity("BusinessObject.Employee", b =>
                {
                    b.HasOne("BusinessObject.Departmennt", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("BusinessObject.ParticipatingProject", b =>
                {
                    b.HasOne("BusinessObject.CompanyProject", "CompanyProject")
                        .WithMany("ParticipatingProjects")
                        .HasForeignKey("CompanyProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Employee", "Employee")
                        .WithMany("ParticipatingProjects")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyProject");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BusinessObject.CompanyProject", b =>
                {
                    b.Navigation("ParticipatingProjects");
                });

            modelBuilder.Entity("BusinessObject.Employee", b =>
                {
                    b.Navigation("ParticipatingProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
